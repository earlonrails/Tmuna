<!doctype html>
<html>
<!--
Tmuna (תמונה, Hebrew for "picture") is an open-sourced free HTML5 drawing application.
    Copyright (C) 2010  Elad Alfassa <elad@fedoraproject.org>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

Github: https://github.com/elad661/Tmuna
!-->
	<head>
		<meta charset="utf-8">
		<title>תמונה: תוכנת ציור בHTML5</title>
		<style type="text/css">
			body {
				direction: rtl;			
			}
			canvas {
				border: 1px solid black;	
			}
			canvas.layer {
				position: absolute; 	
				right:4px; 
			}
			#TempLayer {
				pointer-events: none; 
				z-index: 1;		
			}
			.settings {
				display:none;			
			}
		</style>
		<script type="text/javascript">
				var canvas;
				var ctx;
				var image, ptool;
				var Text;
				var x=0, y=0;
				var x1=-1, y1=-1;
				var Tool="Line";
				var mousedown=false;
				function init() {
			    	canvas = document.getElementById('canvas');
					TempLayer = document.getElementById('TempLayer'); 
  					if (canvas.getContext){	
 						ctx = canvas.getContext('2d');
						ctx2 = TempLayer.getContext('2d');
					} else {  
  						alert("אתה צריך דפדפן עדכני בשביל זה. מה, אתה גולש באקספלורר? איזה דביל! או שתחליף דפדפן או שתעוף מכאן. בחירה שלך."); 
					}
					SelectTool("Line");
					document.addEventListener("touchstart", touchHandler, true);
					document.addEventListener("touchmove", touchHandler, true);
					document.addEventListener("touchend", touchHandler, true);
					document.addEventListener("touchcancel", touchHandler, true);
					Load();
					canvas.onmouseout = function(e) {
						x1=-1;
						mousedown=false;
						canvas.style.cursor="";
						document.getElementById('position').innerHTML="Out";			
					}
					canvas.onmousemove = function(e) {
						UpdateSettings();
						SaveSettings();
						ClearTemp();
						if (e.offsetX) { x = e.offsetX; y = e.offsetY; }
						else if (e.layerX) { x = e.layerX; y = e.layerY }
						document.getElementById('position').innerHTML="X: " + x+", Y: " +y;
						document.getElementById('tool').innerHTML=Tool;
						if (x1!=-1) {	
							switch(Tool) {					
								case "FreeLine":
									DrawLine(x1, y1, x,y);
									x1=x; y1=y;
								break;
								case "Line":
									DrawTempLine(x1, y1, x,y);
								break;
								case "Circle":
									DrawTempCircle(x1, y1, x, y);
								break;
								case "Rect":
									DrawTempRect(x1, y1, x, y);
								break;
								case "Triangle":
									DrawTempTriangle(x1, y1, x, y);
								break;
							}		
						}
						switch (Tool) {
							case "Erase":
								canvas.style.cursor="none";
								ctx2.fillStyle="white";
								ctx2.strokeStyle="black";
								ctx2.lineWidth=1;
								ctx2.globalAlpha=1;
								DrawTempRect(x-25,y-25,x+25,y+25);
								if (mousedown==true) {
									ctx.clearRect(x-25,y-25,50,50);
								}
							break;
							case "Pic":
								canvas.style.cursor="none";
								pich=document.getElementById("pich");
								picw=document.getElementById("picw");
								if (pich.value!="") {
									ctx2.drawImage(image, x, y, picw.value, pich.value);
								} 
								else {
									ctx2.drawImage(image, x, y);
								}
							break;
							case "TextMove":
								canvas.style.cursor="none";
								DrawTempText(x,y, Text);						
							break;
						}
					}
					canvas.onmousedown=function(e) {
						x1=x;
						y1=y;
						mousedown=true;
					}
					canvas.onmouseup=function(e) {
						mousedown=false;
						canvas.style.cursor="";
						ClearTemp();
						UpdateSettings();
						switch (Tool) {
							case "FreeLine":
							case "Line": 
								DrawLine(x1, y1, x,y);				
							break;
							case "Circle":
								DrawCircle(x1, y1, x, y);
							break
							case "Rect":
								DrawRect(x1, y1, x, y);
								break;						
							case "Text":
								Text=null;
								Text=prompt("הקלד טקסט כאן",""); //FIXME: use something better then prompt here
								if (Text!=null && Text!="") {
									DrawTempText(x,y, Text);
									Tool="TextMove";
								}
								break;
							case "TextMove":
								DrawText(x,y, Text);
								SelectTool("Text");						
							break;
							case "Erase":
								ctx.clearRect(x-25,y-25,50,50);
							break;
							case "Pic":
								pich=document.getElementById("pich");
								picw=document.getElementById("picw");
								if (pich.value!="") {
									ctx.drawImage(image, x, y, picw.value, pich.value);
								} 
								else {
									ctx.drawImage(image, x, y);
								}
								SelectTool(ptool);
							break;
							case "Triangle":
								DrawTriangle(x1, y1, x, y);
							break;
							}
						x1=-1;
						Save();
					}
					canvas.addEventListener("dragover", function(event) {
  						event.preventDefault();
					}, true);
					canvas.addEventListener("drop", function(event) {
  						event.preventDefault();
  						ptool=Tool;
						SelectTool("Pic");
						var dataURL = event.dataTransfer.files[0].getAsDataURL();
  						image = new Image();
						image.src=dataURL;
						ctx2.drawImage(image, x, y);
					}, true);
				}
				function ClearTemp() {
					ctx2.clearRect(0,0, 650, 650);
				}
				function UpdateSettings() {
					fill=document.getElementById("fill");
					stroke=document.getElementById("stroke");
					width=document.getElementById("linesize");
					alpha=document.getElementById("alpha");
					linecap=document.getElementById("round");
					if (fill.value!="") {
						ctx.fillStyle=fill.value;
						ctx2.fillStyle=fill.value;
					} else {
						ctx.fillStyle="transparent";
						ctx2.fillStyle="transparent";
					}
					if (stroke.value!="") {			
						ctx.strokeStyle=stroke.value;
						ctx2.strokeStyle=stroke.value;
					}
					if (width.value!="") {
						ctx.lineWidth=width.value;
						ctx2.lineWidth=width.value;
					}
					if (alpha.value!="") {
						ctx.globalAlpha=alpha.value;
						ctx2.globalAlpha=alpha.value;
					} 
					if (linecap.checked==true && (Tool=="Line" || Tool=="FreeLine")) {
						ctx.lineCap = "round";
						ctx2.lineCap = "round";
					} else {
						ctx.lineCap = "butt";
						ctx2.lineCap = "butt";
					}
				
				}
				function touchHandler(event) {
					var touches = event.changedTouches,
					first = touches[0],
					type = "";
					switch(event.type) {
						case "touchstart": type = "mousedown"; break;
						case "touchmove":  type="mousemove"; break;        
						case "touchend":   type="mouseup"; break;
						default: return;
					}
					var simulatedEvent = document.createEvent("MouseEvent");
					simulatedEvent.initMouseEvent(type, true, true, window, 1,
							      first.screenX, first.screenY,
							      first.clientX, first.clientY, false,
							      false, false, false, 0/*left*/, null);

					first.target.dispatchEvent(simulatedEvent);
					event.preventDefault();
				}
				function DrawLine(x1,y1,x2,y2) {
					ctx.beginPath();  
					ctx.moveTo(x1,y1);  
					ctx.lineTo(x2,y2);
					ctx.stroke();
					ctx.closePath();
				}
				function DrawTempLine(x1,y1,x2,y2) {
					prevlineX=x2;
					prevlineY=y2;
					ctx2.beginPath();  
					ctx2.moveTo(x1,y1);  
					ctx2.lineTo(x2,y2);
					ctx2.stroke();
					ctx2.closePath();
				}
				function DrawCircle(x1, y1, x2, y2) {			
					radius=Math.abs(x1-x2)+Math.abs(y1-y2);
					ctx.beginPath();
					ctx.arc(x1, y1, radius, 0, (Math.PI/180)*360, false);
					ctx.fill();
					ctx.stroke();
					ctx.closePath();
				}
				function DrawTempCircle(x1, y1, x2, y2) {
					radius=Math.abs(x1-x2)+Math.abs(y1-y2);
					ctx2.beginPath();
					ctx2.arc(x1, y1, radius, 0, (Math.PI/180)*360, false);
					ctx2.fill();
					ctx2.stroke();
					ctx2.closePath();
				}
				function DrawRect(x1,y1,x2,y2) {
					ctx.beginPath();  
					ctx.moveTo(x1,y1);
					ctx.lineTo(x2, y1);
					ctx.lineTo(x2, y2);
					ctx.lineTo(x1, y2);
					ctx.lineTo(x1, y1);
					ctx.fill();
					ctx.stroke();
					ctx.closePath();
				}
				function DrawTempRect(x1,y1,x2,y2) {
					ctx2.beginPath();  
					ctx2.moveTo(x1,y1);
					ctx2.lineTo(x2, y1);
					ctx2.lineTo(x2, y2);
					ctx2.lineTo(x1, y2);
					ctx2.lineTo(x1, y1);
					ctx2.fill();
					ctx2.stroke();
					ctx2.closePath();
				}
				function DrawText(x, y, text) {
					font=document.getElementById("font").value;
					size=document.getElementById("size").value;
					if (font=="")
						font="sans-serif";
					if (size=="")
						size="10px";
					ctx.font=size+" "+font;
					ctx.beginPath();  
					ctx.strokeText(text, x,y);
					ctx.fillText(text, x,y);
					ctx.closePath();
				}
				function DrawTempText(x, y, text) {
					font=document.getElementById("font").value;
					size=document.getElementById("size").value;
					if (font=="")
						font="sans-serif";
					if (size=="")
						size="10px";
					ctx2.font=size+" "+font;
					ctx2.beginPath();  
					ctx2.strokeText(text, x,y);
					ctx2.fillText(text, x,y);
					ctx2.closePath();
				}
				function DrawTriangle(x1, y1,x2,y2) { //TODO: Other triangles, not just right triangle
					ctx.beginPath();  
					ctx.moveTo(x1,y1);
					ctx.lineTo(x2, y1);
					ctx.lineTo(x2, y2);
					ctx.lineTo(x1, y1);
					ctx.fill();
					ctx.stroke();
					ctx.closePath();			
				}
				function DrawTempTriangle(x1, y1,x2,y2) {
					ctx2.beginPath();  
					ctx2.moveTo(x1,y1);
					ctx2.lineTo(x2, y1);
					ctx2.lineTo(x2, y2);
					ctx2.lineTo(x1, y1);
					ctx2.fill();
					ctx2.stroke();
					ctx2.closePath();			
				}
				function Export() {
					DataURL=canvas.toDataURL("image/png");
					window.open(DataURL);
				}
				function Clear() {
					ClearTemp();
					ctx.clearRect(0,0, 650, 650);
				}
				function SelectTool(ToolName) {
					fontsettings=document.getElementById("fontsettings");
					picsettings=document.getElementById("picsettings");
					linesettings=document.getElementById("linesettings");
					fontsettings.setAttribute("class", "settings");
					picsettings.setAttribute("class", "settings");
					linesettings.setAttribute("class", "settings");
					Tool=ToolName;
					document.getElementById('tool').innerHTML=Tool;
					switch(ToolName) {
						case "Text":
							fontsettings.setAttribute("class", "settingsVis");				
						break;
						case "Pic":
							picsettings.setAttribute("class", "settingsVis");
						break;
						case "FreeLine":
						case "Line":
							linesettings.setAttribute("class", "settingsVis");
						break;
					}				
				}
				function Save() {
					localStorage.setItem("CanvasState", canvas.toDataURL("image/png"));

				}
				function SaveSettings() {
					UpdateSettings();
					localStorage.setItem("Tool", Tool);
					fill=document.getElementById("fill").value;
					stroke=document.getElementById("stroke").value;
					width=document.getElementById("linesize").value;
					alpha=document.getElementById("alpha").value;
					linecap=document.getElementById("round").checked;
					localStorage.setItem("fill", fill);
					localStorage.setItem("stroke", stroke);
					localStorage.setItem("width", width);
					localStorage.setItem("alpha", alpha);
					localStorage.setItem("linecap", linecap);
				}
				function Load() {
					document.getElementById('position').innerHTML="Loading";			
					StoredCanvasState=localStorage.getItem("CanvasState");
					if (StoredCanvasState!=null) {
					  	image = new Image();
						image.src=StoredCanvasState;
						ctx.drawImage(image,0,0,650,650);
					}
					document.getElementById("fill").value=localStorage.getItem("fill");
					document.getElementById("stroke").value=localStorage.getItem("stroke");
					document.getElementById("linesize").value=localStorage.getItem("width");
					document.getElementById("alpha").value=localStorage.getItem("alpha");
					document.getElementById("round").checked=localStorage.getItem("linecap");
					SelectTool(localStorage.getItem("Tool"));
					UpdateSettings();
					document.getElementById('position').innerHTML="";			
				}
		</script>
	</head>
	<body onload="init()">
		<div style="float:left">
		<input type="button" value="ייצוא" onclick="Export()">
		<input type="button" value="ניקוי" onclick="Clear()">
		<br><br>
		<input type="button" onclick="SelectTool('Line')" value="קו" />
		<input type="button" onclick="SelectTool('FreeLine')" value="עיפרון" />
		<input type="button" onclick="SelectTool('Circle')" value="מעגל" />
		<input type="button" onclick="SelectTool('Rect')" value="מרובע" />
		<input type="button" onclick="SelectTool('Triangle')" value="משולש" />
		<input type="button" onclick="SelectTool('Text')" value="טקסט" />
		<input type="button" onclick="SelectTool('Erase')" value="מחק" />
		<br>
		צבע הקו: <input id="stroke" placeholder="black" />
		<br>
		צבע המילוי: <input id="fill" placeholder="transparent" />
		<br>
		רוחב קו: <input id="linesize" placeholder="1" />
		<br>
		שקיפות גלובלית: <input id="alpha" placeholder="1" />
		<div id="fontsettings" class="settings">
		<br>
		גופן: <input id="font" placeholder="sans-serif" />
		<br>
		גודל הגופן: <input id="size" placeholder="10px" />
		</div>
		<div id="picsettings" class="settings">
		<br>
		גובה תמונה: <input id="pich" placeholder="default" />
		<br>
		רוחב תמונה: <input id="picw" placeholder="default" />
		</div>
		<div id="linesettings" class="settings">
		<br>
		קצוות עגולים: <input id="round" type="checkbox"/>
		</div>
		<br>
		<span id="position"></span>&nbsp;
		<span id="tool"></span>
		</div>
		<div class="canvasLayers">
		<canvas id="TempLayer" class="layer" width="650" height="650"></canvas>
		<canvas id="canvas" class="layer" width="650" height="650">
	יש להשתמש בדפדפן תומך Canvas כדי להשתמש ביישום זה. ודאו שאתם משתמשים בגרסה העדכנית ביותר של הדפדפן שלכם, או עברו ל
			<a href="http://firefox.co.il">פיירפוקס</a>.
		</canvas>
		</div>
	</body>
</html>
